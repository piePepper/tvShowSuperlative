{"version":3,"sources":["CardDisplay.js","Sidebar.js","firebase.js","ListSelection.js","ShowGenerator.js","AddToList.js","TvShowCard.js","UserList.js","App.js","serviceWorker.js","index.js"],"names":["CardDisplay","props","setDisplayArray","console","log","data","setState","displayArray","state","previousProps","previousState","this","className","map","each","to","id","src","image","medium","alt","rating","average","name","Component","SideBar","createFilterArrays","response","tempFilters","chosenFilters","forEach","index","tempArray","key","subKey","undefined","single","constructor","Array","nestedValue","includes","push","sort","filters","dropHandler","event","returnFilter","target","value","bringItOnBack","searchHandler","searchBar","sideBarData","preventDefault","searchPass","apiData","type","placeholder","onChange","onClick","row","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ListSelection","componentDidMount","database","ref","on","snapshot","dbArray","dbReturn","val","objEntry","length","listID","child","remove","entry","listName","removeList","ShowGenerator","setSearch","queryFromSidebar","query","apiHandler","setFilterArray","arrayFromSidebar","setArray","filter","filterArray","filterData","axios","url","then","show","filterItem","word","extra","Sidebar","AddToList","setNewShow","dbRef","path","getAttribute","showID","update","counter","parseInt","showid","TvShowCard","match","params","network","country","genres","summary","replace","UserList","App","getListNameThenAddToDatabase","userObj","prompt","shows","basename","process","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fed39459.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Display for each individual card\n\nclass CardDisplay extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        displayArray: []\n      }\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousProps.data !== this.props.data) {\n      this.setDisplayArray();\n    }\n  }\n\n  setDisplayArray = () => {\n    console.log(this.props.data)\n    this.setState({\n      displayArray: this.props.data,\n    },() => console.log(this.state.displayArray))\n  }\n\n  render() {\n      return (\n        <div className=\"cardContainer\">\n          {\n            this.state.displayArray.map((each) => {\n              return(\n          <div className=\"movieContainer\">\n              <Link to={`/show/${each.id}`}>\n                  <img src={each.image.medium} alt=\"add this\"/>\n                  <h4 className='bodyCardRating'>{each.rating.average}</h4>\n                  <h3 className='bodyCardTitle'>{each.name}</h3>\n              </Link> \n        </div>\n              )\n            })\n          }\n        </div>\n      );\n    }\n}\n\nexport default CardDisplay;\n","import React, { Component } from \"react\";\n\n  //todo need to add the sorting dropdown\n\nclass SideBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchBar: '',\n      filters: [],\n      returnFilter: [\n        ['', 'language'],\n        ['', 'genres'],\n        ['', 'status'],\n        ['', 'network', 'name'],\n      ],\n    };\n  }\n\n  createFilterArrays = (response) => {\n    let tempFilters = [];\n    this.props.chosenFilters.forEach((each, index) => {\n      let tempArray = [];\n      let [key, subKey] = each;\n      if (subKey === undefined) {\n        response.forEach((single) => {\n          if (single[`${key}`] === null || single[`${key}`] === undefined) { }\n          else if (single[`${key}`].constructor === Array) {\n            single[`${key}`].forEach((nestedValue) => {\n              if (!tempArray.includes(nestedValue))\n                tempArray.push(nestedValue)\n            })\n          }\n          else if (!tempArray.includes(single[`${key}`])) {\n            tempArray.push(single[`${key}`])\n          }\n        })\n      }\n      else {\n        response.forEach((single) => {\n          if (single[`${key}`] === null || single[`${key}`] === undefined || single[`${key}`][`${subKey}`] === null || single[`${key}`][`${subKey}`] === undefined) { }\n          else if (single[`${key}`][`${subKey}`].constructor === Array) {\n            single[`${key}`][`${subKey}`].forEach((nestedValue) => {\n              if (!tempArray.includes(nestedValue))\n                tempArray.push(nestedValue)\n            })\n          }\n          else if (!tempArray.includes(single[`${key}`][`${subKey}`])) {\n            tempArray.push(single[`${key}`][`${subKey}`])\n          }\n        })\n      }\n      tempFilters.push([tempArray.sort(), [key], [subKey]])\n    })\n    this.setState({\n      filters: tempFilters,\n    })\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousProps.apiData !== this.props.apiData) {\n      this.createFilterArrays(this.props.apiData);\n    }\n  }\n\n  dropHandler = (event) => {\n    let tempArray = this.state.returnFilter;\n    (event.target.value === '')\n      ?\n      tempArray[`${event.target.id}`][0] = ''\n      :\n      tempArray[`${event.target.id}`][0] = event.target.value\n    this.setState({\n      returnFilter: tempArray\n    }, () => this.props.bringItOnBack(this.state.returnFilter));\n  };\n\n  searchHandler = (event) => {\n    this.setState({\n      searchBar: event.target.value\n    })\n  }\n\n  sideBarData = (event) => {\n    event.preventDefault();\n    this.props.searchPass(this.state.searchBar);\n  };\n\n  render() {\n    return (\n      <div className=\"queryContainer\">\n        <form>\n          <input type=\"text\" placeholder=\"Search\" \n          onChange={this.searchHandler}className=\"searchBox\" />\n          <button className=\"sideBarSearchBtn\" onClick={this.sideBarData}>Search</button>\n        </form>\n        <form className=\"criteriaContainer\">\n          {\n            this.state.filters.map((row, index) => {\n              return (\n                <>\n                  <label className=\"languageContainer\">\n                    {`${row[1]}`}\n                  </label>\n                  <select id={`${index}`} name={`${row[1]}`} onChange={this.dropHandler}>\n                    <option value=''></option>\n                    {\n                      this.state.filters[index][0].map((each) => {\n                        return (\n                          <option value={`${each}`}>{`${each}`}</option>\n                        )\n                      })\n                    }\n                  </select>\n                </>\n              )\n            })\n          }\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SideBar;\n\n  //! I may need this for setting the sorting dropdown\n  // sortThis = () => {\n  //     let sortArray = this.state.apiData;\n  //     sortArray.sort((a, b) => {\n  //         return b.rating.average - a.rating.average\n  //     });\n  //     this.setState({\n  //         sortedData: sortArray,\n  //     })\n  // }\n  //!\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBtt_2ViryDprk5dNwiZzqWYaV8fHTd_K0\",\n  authDomain: \"tvshowsuperlatives.firebaseapp.com\",\n  databaseURL: \"https://tvshowsuperlatives.firebaseio.com\",\n  projectId: \"tvshowsuperlatives\",\n  storageBucket: \"tvshowsuperlatives.appspot.com\",\n  messagingSenderId: \"737126203732\",\n  appId: \"1:737126203732:web:6d32c3814e4e2de65f08c1\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport { Link } from \"react-router-dom\";\n\nclass ListSelection extends Component {\n    constructor() {\n        super();\n        this.state = {\n            dbReturn: []\n        }\n    }\n\n    componentDidMount = () => {\n        const dbRef = firebase.database().ref()\n        dbRef.on('value', (snapshot) => {\n            const dbArray = []\n            const dbReturn = snapshot.val()\n            for (let objEntry in dbReturn) {\n\n                if (objEntry.length > 14) {\n                    dbArray.push({ key: objEntry, name: dbReturn[objEntry] })\n                }\n            }\n            console.log(dbArray, \"this is my database array\")\n            this.setState({\n                dbReturn: dbArray\n            })\n        })\n    }\n\n    removeList(listID) {\n        const dbRef = firebase.database().ref()\n        dbRef.child(listID).remove()\n    }\n\n    render() {\n        return (\n            <div className=\"firebase-data\">\n                <h1>User Lists</h1>\n\n                <ul>\n                    {this.state.dbReturn.map((entry) => {\n                        return (\n                            <li key={entry.key}>\n                                <Link to={`/list/${entry.key}`}>\n                                    <p>{entry.name.listName}</p>\n                                    <button onClick={() => { this.removeList(entry.key) }}>X</button>\n                                </Link>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default ListSelection;\n\n","import React, { Component } from \"react\";\nimport CardDisplay from \"./CardDisplay\";\nimport Sidebar from \"./Sidebar\";\nimport axios from \"axios\";\nimport \"./styles/styles.scss\";\nimport ListSelection from './ListSelection';\n\n//todo Need to bring dropdown info from sidebar and sort displayArray prior to render.\n\nclass ShowGenerator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: '',\n            chosenFilters: [['language'], ['genres'], ['status'], ['network', 'name']],\n            apiData: [],\n            filterArray: [],\n            displayArray: [],\n        };\n    }\n\n    apiHandler() {\n        this.state.query === ''\n        ?\n            axios({\n                url: 'https://api.tvmaze.com/shows'\n            })\n            .then((response) => {\n                this.setState({\n                    apiData: response.data,\n                    displayArray: response.data\n                }); \n            })\n        :\n            axios({\n                url: ` http://api.tvmaze.com/search/shows?q=${this.state.query}`\n            })\n            .then((response) => {\n                this.setState({\n                    apiData: response.data.map( (each) => {\n                        return each.show;}),\n                    displayArray: response.data.map( (each) => {\n                        return each.show;})\n                });\n            })\n    }\n\n    componentDidMount() {\n        this.apiHandler();\n    }\n\n    setSearch = (queryFromSidebar) => {\n        this.setState({\n            query: queryFromSidebar,\n        }, () => this.apiHandler())\n    }\n\n    filterData() {\n        let data = this.state.apiData\n        this.state.filterArray.forEach((filterItem) => {\n            let [word, filter, extra] = filterItem;\n            const recursiveFilter = (recursedArray) => {\n                data =  recursedArray.filter((each) => {\n                    if( extra !== undefined) {\n                        if (each[`${filter}`] === null ||\n                            each[`${filter}`] === undefined ||\n                            each[`${filter}`][`${extra}`] === null || \n                            each[`${filter}`][`${extra}`] === undefined)\n                        {}\n                        else if(each[`${filter}`][`${extra}`].includes(word)) {\n                                return each\n                        }\n                    }\n                    else if(each[`${filter}`] !== null &&\n                            each[`${filter}`] !== undefined &&\n                            each[`${filter}`].includes(word)) {\n                                return each\n                    }\n                })\n            }\n            recursiveFilter(data);\n        })\n        this.setState({\n            displayArray: data,\n        })\n    }\n\n    setFilterArray = (arrayFromSidebar) => {\n        let setArray = arrayFromSidebar.filter((each) => {\n            if(each[0] !== '')\n                return each\n        })\n        this.setState({\n            filterArray: setArray,\n        }, () => this.filterData())\n    }\n\n    render() {\n        return (\n            <div className=\"showGeneratorContainer\">\n                <div className=\"sideBarContainer\">\n                <Sidebar chosenFilters={this.state.chosenFilters} apiData={this.state.apiData} bringItOnBack={this.setFilterArray} searchPass={this.setSearch} />\n                <ListSelection />\n                </div>\n                <div className=\"cardDisplayContainer\">\n                <CardDisplay data={this.state.displayArray} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ShowGenerator;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\n\n\n// this component adds the show ID to a specific user list\n\nclass AddToList extends Component {\n    constructor() {\n        super();\n        this.state = {\n            dbReturn: []\n        }\n    }\n\n    componentDidMount = () => {\n        const dbRef = firebase.database().ref()\n        dbRef.on('value', (snapshot) => {\n            const dbArray = []\n            const dbReturn = snapshot.val()\n            for (let objEntry in dbReturn) {\n\n                if (objEntry.length > 14) {\n                    dbArray.push({ key: objEntry, name: dbReturn[objEntry] })\n                }\n            }\n            console.log(dbArray, \"this is my database array\")\n            this.setState({\n                dbReturn: dbArray\n            })\n        })\n    }\n\n    // the remove function doesn't work just yet \n\n    // removeList(listID) {\n    //     const dbRef = firebase.database().ref()\n    //     dbRef.child(listID).remove()\n    // }\n\n    setNewShow = (event) => {\n        event.preventDefault()\n        const dbRef = firebase.database().ref()\n        const path = event.target.getAttribute('path')\n        const showID = event.target.getAttribute('showid')\n        dbRef.child(path).child(\"shows\").child(`${showID}`).update({ counter: 0 })\n    }\n\n    render() {\n        return (\n            <div className=\"firebase-data\">\n                <h1>User Lists</h1>\n                {console.log(parseInt(this.props.id))}\n                <ul>\n                    {this.state.dbReturn.map((entry) => {\n                        return (\n                            <button key={entry.key} path={entry.key} showid={(parseInt(this.props.id))}\n                                onClick={this.setNewShow}>\n                                Add to {entry.name.listName}\n                            </button>\n                        )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default AddToList;\n\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { render } from \"@testing-library/react\";\nimport AddToList from \"./AddToList\"\n\nclass TvShowCard extends Component {\n  constructor() {\n    super();\n    this.state = { apiData: [] };\n  }\n  componentDidMount() {\n    axios({\n      url: \"https://api.tvmaze.com/shows/\" + this.props.match.params.id,\n    }).then((response) => {\n      console.log(response.data);\n      this.setState({ \n        apiData: response.data \n      });\n    });\n  }\n  render() {\n    const data = this.state.apiData;\n    if (!data) {\n      return <div>loading</div>;\n    }\n    return (\n      <div className=\"tvShowCard\">\n        <h1 className=\"showTitle\">{data.name}</h1>\n        <img src={data.image && data.image.medium} alt={data.name} />\n        <ul>\n          <li>{data.network && data.network.name}</li>\n          <li>{data.country}</li>\n          <li>{data.genres}</li>\n          <li>{data.summary && data.summary.replace(/(<([^>]+)>)/gi, \"\")}</li>\n          <AddToList id={this.props.match.params.id}/>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default TvShowCard;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport firebase from \"./firebase\";\n\nclass UserList extends Component {\n\n    render(){\n        return(\n            <div>\n                <h1>If you see this you got it</h1>\n            </div>\n        )\n    }\n\n\n}\n\nexport default UserList","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ShowGenerator from \"./ShowGenerator\";\nimport ListSelection from \"./ListSelection\";\nimport TvShowCard from \"./TvShowCard\";\nimport firebase from \"./firebase\";\nimport \"./styles/styles.scss\";\nimport UserList from \"./UserList\";\n\nclass App extends Component {\n  // CC read this. Add route after the axios call is destructured\n  getListNameThenAddToDatabase = () => {\n    const listName = prompt(\"Enter List Name\");\n    const dbRef = firebase.database().ref();\n    const userObj = {\n      listName: listName,\n      shows: [],\n    };\n    dbRef.push(userObj);\n  };\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <header>\n            <h1 className=\"mainTitle\"> PiePepper</h1>\n            <button \n            onClick={this.getListNameThenAddToDatabase}\n            className=\"createListBtn\">\n              Create List\n            </button>\n          </header>\n          {/* <ListSelection /> */}\n          <Route exact path=\"/\" component={ShowGenerator} />\n          <Route path=\"/show/:id\" component={TvShowCard} />\n          <Route path=\"/list/:listid\" component={UserList} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}