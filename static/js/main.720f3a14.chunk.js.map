{"version":3,"sources":["CardDisplay.js","Sidebar.js","ShowGenerator.js","firebase.js","ListSelection.js","TvShowCard.js","UserList.js","App.js","serviceWorker.js","index.js"],"names":["CardDisplay","props","setDisplayArray","console","log","data","setState","displayArray","state","previousProps","previousState","this","map","each","to","id","className","src","image","medium","alt","rating","average","name","Component","SideBar","createFilterArrays","response","tempFilters","chosenFilters","forEach","index","tempArray","key","subKey","undefined","single","constructor","Array","nestedValue","includes","push","sort","filters","dropHandler","event","returnFilter","target","value","bringItOnBack","searchHandler","searchBar","sideBarData","preventDefault","searchPass","apiData","type","placeholder","onChange","onClick","row","ShowGenerator","setSearch","queryFromSidebar","query","apiHandler","setFilterArray","arrayFromSidebar","setArray","filter","filterArray","filterData","axios","url","then","show","filterItem","word","extra","Sidebar","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ListSelection","componentDidMount","database","ref","on","snapshot","dbArray","dbReturn","val","objEntry","length","listID","child","remove","entry","listName","removeList","TvShowCard","match","params","network","country","genres","summary","replace","UserList","App","getListNameThenAddToDatabase","userObj","prompt","shows","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.720f3a14.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Display for each individual card\r\n\r\nclass CardDisplay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n      this.state = {\r\n        displayArray: []\r\n      }\r\n  }\r\n\r\n  componentDidUpdate(previousProps, previousState) {\r\n    if (previousProps.data !== this.props.data) {\r\n      this.setDisplayArray();\r\n    }\r\n  }\r\n\r\n  setDisplayArray = () => {\r\n    console.log(this.props.data)\r\n    this.setState({\r\n      displayArray: this.props.data,\r\n    },() => console.log(this.state.displayArray))\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <div>\r\n          {\r\n            this.state.displayArray.map((each) => {\r\n              return(\r\n              <Link to={`/show/${each.id}`}>\r\n                <div className='cardContainer'>\r\n                  <img src={each.image.medium} alt=\"add this\"/>\r\n                  <h4 className='bodyCardRating'>{each.rating.average}</h4>\r\n                  <h3 className='bodyCardTitle'>{each.name}</h3>\r\n                </div>\r\n              </Link> \r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default CardDisplay;\r\n","import React, { Component } from \"react\";\r\n\r\n  //todo need to add the sorting dropdown\r\n\r\nclass SideBar extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchBar: '',\r\n      filters: [],\r\n      returnFilter: [\r\n        ['', 'language'],\r\n        ['', 'genres'],\r\n        ['', 'status'],\r\n        ['', 'network', 'name'],\r\n      ],\r\n    };\r\n  }\r\n\r\n  createFilterArrays = (response) => {\r\n    let tempFilters = [];\r\n    this.props.chosenFilters.forEach((each, index) => {\r\n      let tempArray = [];\r\n      let [key, subKey] = each;\r\n      if (subKey === undefined) {\r\n        response.forEach((single) => {\r\n          if (single[`${key}`] === null || single[`${key}`] === undefined) { }\r\n          else if (single[`${key}`].constructor === Array) {\r\n            single[`${key}`].forEach((nestedValue) => {\r\n              if (!tempArray.includes(nestedValue))\r\n                tempArray.push(nestedValue)\r\n            })\r\n          }\r\n          else if (!tempArray.includes(single[`${key}`])) {\r\n            tempArray.push(single[`${key}`])\r\n          }\r\n        })\r\n      }\r\n      else {\r\n        response.forEach((single) => {\r\n          if (single[`${key}`] === null || single[`${key}`] === undefined || single[`${key}`][`${subKey}`] === null || single[`${key}`][`${subKey}`] === undefined) { }\r\n          else if (single[`${key}`][`${subKey}`].constructor === Array) {\r\n            single[`${key}`][`${subKey}`].forEach((nestedValue) => {\r\n              if (!tempArray.includes(nestedValue))\r\n                tempArray.push(nestedValue)\r\n            })\r\n          }\r\n          else if (!tempArray.includes(single[`${key}`][`${subKey}`])) {\r\n            tempArray.push(single[`${key}`][`${subKey}`])\r\n          }\r\n        })\r\n      }\r\n      tempFilters.push([tempArray.sort(), [key], [subKey]])\r\n    })\r\n    this.setState({\r\n      filters: tempFilters,\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(previousProps, previousState) {\r\n    if (previousProps.apiData !== this.props.apiData) {\r\n      this.createFilterArrays(this.props.apiData);\r\n    }\r\n  }\r\n\r\n  dropHandler = (event) => {\r\n    let tempArray = this.state.returnFilter;\r\n    (event.target.value === '')\r\n      ?\r\n      tempArray[`${event.target.id}`][0] = ''\r\n      :\r\n      tempArray[`${event.target.id}`][0] = event.target.value\r\n    this.setState({\r\n      returnFilter: tempArray\r\n    }, () => this.props.bringItOnBack(this.state.returnFilter));\r\n  };\r\n\r\n  searchHandler = (event) => {\r\n    this.setState({\r\n      searchBar: event.target.value\r\n    })\r\n  }\r\n\r\n  sideBarData = (event) => {\r\n    event.preventDefault();\r\n    this.props.searchPass(this.state.searchBar);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <input type=\"text\" placeholder=\"Search\" onChange={this.searchHandler} />\r\n          <button className=\"sideBarSearchBtn\" onClick={this.sideBarData}>Search</button>\r\n        </form>\r\n        <form>\r\n          {\r\n            this.state.filters.map((row, index) => {\r\n              return (\r\n                <>\r\n                  <label>\r\n                    {`${row[1]}`}\r\n                  </label>\r\n                  <select id={`${index}`} name={`${row[1]}`} onChange={this.dropHandler}>\r\n                    <option value=''></option>\r\n                    {\r\n                      this.state.filters[index][0].map((each) => {\r\n                        return (\r\n                          <option value={`${each}`}>{`${each}`}</option>\r\n                        )\r\n                      })\r\n                    }\r\n                  </select>\r\n                </>\r\n              )\r\n            })\r\n          }\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideBar;\r\n\r\n  //! I may need this for setting the sorting dropdown\r\n  // sortThis = () => {\r\n  //     let sortArray = this.state.apiData;\r\n  //     sortArray.sort((a, b) => {\r\n  //         return b.rating.average - a.rating.average\r\n  //     });\r\n  //     this.setState({\r\n  //         sortedData: sortArray,\r\n  //     })\r\n  // }\r\n  //!\r\n","import React, { Component } from \"react\";\r\nimport CardDisplay from \"./CardDisplay\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\n\r\n//todo Need to bring dropdown info from sidebar and sort displayArray prior to render.\r\n\r\nclass ShowGenerator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            query: '',\r\n            chosenFilters: [['language'], ['genres'], ['status'], ['network', 'name']],\r\n            apiData: [],\r\n            filterArray: [],\r\n            displayArray: [],\r\n        };\r\n    }\r\n\r\n    apiHandler() {\r\n        this.state.query === ''\r\n        ?\r\n            axios({\r\n                url: 'https://api.tvmaze.com/shows'\r\n            })\r\n            .then((response) => {\r\n                this.setState({\r\n                    apiData: response.data,\r\n                    displayArray: response.data\r\n                }); \r\n            })\r\n        :\r\n            axios({\r\n                url: ` http://api.tvmaze.com/search/shows?q=${this.state.query}`\r\n            })\r\n            .then((response) => {\r\n                this.setState({\r\n                    apiData: response.data.map( (each) => {\r\n                        return each.show;}),\r\n                    displayArray: response.data.map( (each) => {\r\n                        return each.show;})\r\n                });\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.apiHandler();\r\n    }\r\n\r\n    setSearch = (queryFromSidebar) => {\r\n        this.setState({\r\n            query: queryFromSidebar,\r\n        }, () => this.apiHandler())\r\n    }\r\n\r\n    filterData() {\r\n        let data = this.state.apiData\r\n        this.state.filterArray.forEach((filterItem) => {\r\n            let [word, filter, extra] = filterItem;\r\n            const recursiveFilter = (recursedArray) => {\r\n                data =  recursedArray.filter((each) => {\r\n                    if( extra !== undefined) {\r\n                        if (each[`${filter}`] === null ||\r\n                            each[`${filter}`] === undefined ||\r\n                            each[`${filter}`][`${extra}`] === null || \r\n                            each[`${filter}`][`${extra}`] === undefined)\r\n                        {}\r\n                        else if(each[`${filter}`][`${extra}`].includes(word)) {\r\n                                return each\r\n                        }\r\n                    }\r\n                    else if(each[`${filter}`] !== null &&\r\n                            each[`${filter}`] !== undefined &&\r\n                            each[`${filter}`].includes(word)) {\r\n                                return each\r\n                    }\r\n                })\r\n            }\r\n            recursiveFilter(data);\r\n        })\r\n        this.setState({\r\n            displayArray: data,\r\n        })\r\n    }\r\n\r\n    setFilterArray = (arrayFromSidebar) => {\r\n        let setArray = arrayFromSidebar.filter((each) => {\r\n            if(each[0] !== '')\r\n                return each\r\n        })\r\n        this.setState({\r\n            filterArray: setArray,\r\n        }, () => this.filterData())\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Sidebar chosenFilters={this.state.chosenFilters} apiData={this.state.apiData} bringItOnBack={this.setFilterArray} searchPass={this.setSearch} />\r\n                <CardDisplay data={this.state.displayArray} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShowGenerator;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBtt_2ViryDprk5dNwiZzqWYaV8fHTd_K0\",\r\n  authDomain: \"tvshowsuperlatives.firebaseapp.com\",\r\n  databaseURL: \"https://tvshowsuperlatives.firebaseio.com\",\r\n  projectId: \"tvshowsuperlatives\",\r\n  storageBucket: \"tvshowsuperlatives.appspot.com\",\r\n  messagingSenderId: \"737126203732\",\r\n  appId: \"1:737126203732:web:6d32c3814e4e2de65f08c1\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from 'react';\r\nimport firebase from './firebase';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ListSelection extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dbReturn: []\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const dbRef = firebase.database().ref()\r\n        dbRef.on('value', (snapshot) => {\r\n            const dbArray = []\r\n            const dbReturn = snapshot.val()\r\n            for (let objEntry in dbReturn) {\r\n\r\n                if (objEntry.length > 14) {\r\n                    dbArray.push({ key: objEntry, name: dbReturn[objEntry] })\r\n                }\r\n            }\r\n            console.log(dbArray, \"this is my database array\")\r\n            this.setState({\r\n                dbReturn: dbArray\r\n            })\r\n        })\r\n    }\r\n\r\n    removeList(listID) {\r\n        const dbRef = firebase.database().ref()\r\n        dbRef.child(listID).remove()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"firebase-data\">\r\n                <h1>User Lists</h1>\r\n\r\n                <ul>\r\n                    {this.state.dbReturn.map((entry) => {\r\n                        return (\r\n                            <li key={entry.key}>\r\n                                <Link to={`/list/${entry.key}`}>\r\n                                    <p>{entry.name.listName}</p>\r\n                                    <button onClick={() => { this.removeList(entry.key) }}>X</button>\r\n                                </Link>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListSelection;\r\n\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\nclass TvShowCard extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { apiData: [] };\r\n  }\r\n  componentDidMount() {\r\n    axios({\r\n      url: \"https://api.tvmaze.com/shows/\" + this.props.match.params.id,\r\n    }).then((response) => {\r\n      console.log(response.data);\r\n      this.setState({ \r\n        apiData: response.data \r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    const data = this.state.apiData;\r\n    if (!data) {\r\n      return <div>loading</div>;\r\n    }\r\n    return (\r\n      <div className=\"tvShowCard\">\r\n        <h1 className=\"showTitle\">{data.name}</h1>\r\n        <img src={data.image && data.image.medium} alt={data.name} />\r\n        <ul>\r\n          <li>{data.network && data.network.name}</li>\r\n          <li>{data.country}</li>\r\n          <li>{data.genres}</li>\r\n          <li>{data.summary && data.summary.replace(/(<([^>]+)>)/gi, \"\")}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TvShowCard;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport firebase from \"./firebase\";\r\n\r\nclass UserList extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>If you see this you got it</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default UserList","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport ShowGenerator from \"./ShowGenerator\";\r\nimport ListSelection from \"./ListSelection\";\r\nimport TvShowCard from \"./TvShowCard\";\r\nimport firebase from \"./firebase\";\r\nimport \"./App.css\";\r\nimport UserList from \"./UserList\"\r\n\r\nclass App extends Component {\r\n\r\n// CC read this. Add route after the axios call is destructured\r\n  getListNameThenAddToDatabase = () => {\r\n    const listName = prompt(\"Enter List Name\")\r\n    const dbRef = firebase.database().ref()\r\n    const userObj = {\r\n      listName: listName,\r\n      shows: []\r\n    }\r\n    dbRef.push(userObj)\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <header>\r\n            <h1>Test PiePepper</h1>\r\n            <button onClick={this.getListNameThenAddToDatabase}>Create List</button>\r\n          </header>\r\n          <ListSelection />\r\n          <Route exact path=\"/\" component={ShowGenerator} />\r\n          <Route path=\"/show/:id\" component={TvShowCard} />\r\n          <Route path=\"/list/:listid\" component={UserList} />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}