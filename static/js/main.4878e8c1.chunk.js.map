{"version":3,"sources":["images/NoImageAvailableLarge.jpg","firebase.js","ListSelection.js","CardDisplay.js","Sidebar.js","ShowGenerator.js","AddToList.js","TvShowCard.js","UserList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ListSelection","componentDidMount","database","ref","on","snapshot","dbArray","dbReturn","val","objEntry","length","push","key","name","setState","state","listID","child","remove","className","this","map","entry","to","listName","onClick","removeList","Component","CardDisplay","props","setDisplayArray","displayArray","data","previousProps","previousState","each","id","src","image","NoImageAvailableLarge","medium","alt","rating","average","SideBar","createFilterArrays","response","tempFilters","chosenFilters","forEach","index","tempArray","subKey","undefined","single","constructor","Array","nestedValue","includes","sort","filters","dropHandler","event","returnFilter","target","value","bringItOnBack","searchHandler","searchBar","sortHandler","sortPass","split","sideBarData","preventDefault","searchPass","sortArray","apiData","type","placeholder","onChange","row","ShowGenerator","setSearch","queryFromSidebar","query","apiHandler","setFilterArray","arrayFromSidebar","setArray","filter","filterArray","filterData","ratingSort","order","a","b","nameSort","toLowerCase","sortFunc","settings","axios","url","then","show","filterItem","word","extra","Sidebar","AddToList","setNewShow","dbRef","path","getAttribute","showID","update","counter","showid","parseInt","TvShowCard","match","params","network","country","genres","summary","replace","UserList","unsortedArray","unsortedObj","displayListInfo","shows","sortedArrayWithID","x","arrayWithShowIDs","counterFunc","listid","myNum","origNum","createUserListDisplay","promiseArray","Promise","all","item","storeArray","sortedArray","idArray","App","getListNameThenAddToDatabase","userObj","prompt","basename","process","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4878e8c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NoImageAvailableLarge.c8f94494.jpg\";","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBtt_2ViryDprk5dNwiZzqWYaV8fHTd_K0\",\n  authDomain: \"tvshowsuperlatives.firebaseapp.com\",\n  databaseURL: \"https://tvshowsuperlatives.firebaseio.com\",\n  projectId: \"tvshowsuperlatives\",\n  storageBucket: \"tvshowsuperlatives.appspot.com\",\n  messagingSenderId: \"737126203732\",\n  appId: \"1:737126203732:web:6d32c3814e4e2de65f08c1\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport { Link } from \"react-router-dom\";\n\nclass ListSelection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dbReturn: [],\n    };\n  }\n\n  componentDidMount = () => {\n    const dbRef = firebase.database().ref();\n    dbRef.on(\"value\", (snapshot) => {\n      const dbArray = [];\n      const dbReturn = snapshot.val();\n      for (let objEntry in dbReturn) {\n        if (objEntry.length > 14) {\n          dbArray.push({ key: objEntry, name: dbReturn[objEntry] });\n        }\n      }\n      this.setState({\n        dbReturn: dbArray,\n      });\n    });\n  };\n\n  removeList(listID) {\n    const dbRef = firebase.database().ref();\n    dbRef.child(listID).remove();\n  }\n\n  render() {\n    return (\n      <div className=\"firebase-data\">\n        <h1>User Lists</h1>\n        <ul>\n          {this.state.dbReturn.map((entry) => {\n            return (\n              <li key={entry.key}>\n                <Link to={`/list/${entry.key}`}>\n                  <p>{entry.name.listName}</p>\n                  <button\n                    className=\"listDelete\"\n                    onClick={() => {\n                      this.removeList(entry.key);\n                    }}\n                  >\n                    X\n                  </button>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default ListSelection;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport NoImageAvailableLarge from \"./images/NoImageAvailableLarge.jpg\";\n\n// Display for each individual card\n\nclass CardDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayArray: [],\n    };\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousProps.data !== this.props.data) {\n      this.setDisplayArray();\n    }\n  }\n\n  setDisplayArray = () => {\n    this.setState({\n      displayArray: this.props.data,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        {this.state.displayArray.length !== 0 ? (\n          this.state.displayArray.map((each) => {\n            return (\n              <div className=\"movieContainer\">\n                <Link to={`/show/${each.id}`}>\n                  <img\n                    src={\n                      each.image === null\n                        ? NoImageAvailableLarge\n                        : each.image.medium\n                    }\n                    alt={each.name}\n                  />\n                  <h4 className=\"bodyCardRating\">{each.rating.average}</h4>\n                  <h3 className=\"bodyCardTitle\">{each.name}</h3>\n                </Link>\n              </div>\n            );\n          })\n        ) : (\n          <h2>No results to show for combination of search and/or filters.</h2>\n        )}\n      </>\n    );\n  }\n}\n\nexport default CardDisplay;\n","import React, { Component } from \"react\";\n\nclass SideBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchBar: \"\",\n      filters: [],\n      returnFilter: [\n        [\"\", \"language\"],\n        [\"\", \"genres\"],\n        [\"\", \"status\"],\n        [\"\", \"network\", \"name\"],\n      ],\n      sortArray: [\n        [\"A-Z\", \"name\", \"1\"],\n        [\"Z-A\", \"name\", \"-1\"],\n        [\"Highest Rated\", \"rating\", \"1\"],\n        [\"Lowest Rated\", \"rating\", \"-1\"],\n      ],\n    };\n  }\n\n  //this ugly behemoth of a function is designed to scour all the data from our\n  //returned api call and dynamically add any unique results to the filter options on the left.\n  //we have to setup state before hand, but by adding a new filter to chosenFilter we can\n  //automatically create a list of filter terms for any api result.\n  //Given time this could clearly be refactored, but it was one of the first functions created, and\n  //didn't have time to look back.\n  //Rather than have if/else for subke === undefined, I would likely make a single statement that\n  //created the appropriate variable for all 4 if/else situations below.\n  //doing so, I could use a single null || undefined statement to fill the filter lists.\n  //anyways, if wishes were horses...\n  createFilterArrays = (response) => {\n    let tempFilters = [];\n    this.props.chosenFilters.forEach((each, index) => {\n      let tempArray = [];\n      let [key, subKey] = each;\n      if (subKey === undefined) {\n        response.forEach((single) => {\n          if (single[key] === null || single[key] === undefined) {\n          } else if (single[key].constructor === Array) {\n            single[key].forEach((nestedValue) => {\n              if (!tempArray.includes(nestedValue)) tempArray.push(nestedValue);\n            });\n          } else if (!tempArray.includes(single[key])) {\n            tempArray.push(single[key]);\n          }\n        });\n      } else {\n        response.forEach((single) => {\n          if (\n            single[key] === null ||\n            single[key] === undefined ||\n            single[key][subKey] === null ||\n            single[key][subKey] === undefined\n          ) {\n          } else if (single[key][subKey].constructor === Array) {\n            single[key][subKey].forEach((nestedValue) => {\n              if (!tempArray.includes(nestedValue)) tempArray.push(nestedValue);\n            });\n          } else if (!tempArray.includes(single[key][subKey])) {\n            tempArray.push(single[key][subKey]);\n          }\n        });\n      }\n      tempFilters.push([tempArray.sort(), [key], [subKey]]);\n    });\n    this.setState({\n      filters: tempFilters,\n    });\n  };\n\n  //anytime the props change, fire the createFilters array so we always\n  //have up to date options in our filters.\n  componentDidUpdate(previousProps, previousState) {\n    if (previousProps.apiData !== this.props.apiData) {\n      this.createFilterArrays(this.props.apiData);\n    }\n  }\n\n  //this creates and returns to ShowGenerator, the array used\n  // to filter the displayed results on the main page.\n  dropHandler = (event) => {\n    let tempArray = this.state.returnFilter;\n    event.target.value === \"\"\n      ? (tempArray[event.target.id][0] = \"\")\n      : (tempArray[event.target.id][0] = event.target.value);\n    this.setState(\n      {\n        returnFilter: tempArray,\n      },\n      () => this.props.bringItOnBack(this.state.returnFilter)\n    );\n  };\n\n  //takes search value and sets it on change ready to be sent back\n  //for our API to use in ShowGenerator.\n  searchHandler = (event) => {\n    this.setState({\n      searchBar: event.target.value,\n    });\n  };\n\n  //pass back the sorting information to ShowGenerator.\n  //it's a string with a comma that separates two values,\n  //so split on the comma and return to two values we want.\n  sortHandler = (event) => {\n    this.props.sortPass(event.target.value.split(\",\"));\n  };\n\n  //send back searchBar values to ShowGenerator to use.\n  sideBarData = (event) => {\n    event.preventDefault();\n    this.props.searchPass(this.state.searchBar);\n  };\n\n  render() {\n    return (\n      <div className=\"queryContainer\">\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            onChange={this.searchHandler}\n            className=\"searchBox\"\n          />\n          <button className=\"sideBarSearchBtn\" onClick={this.sideBarData}>\n            Search{\" \"}\n          </button>\n        </form>\n        <form className=\"criteriaContainer\">\n          {this.state.filters.map((row, index) => {\n            return (\n              <>\n                <label className=\"languageContainer\">{row[1]}</label>\n                <select id={index} name={row[1]} onChange={this.dropHandler}>\n                  <option value=\"\"></option>\n                  {this.state.filters[index][0].map((each) => {\n                    return <option value={each}>{each}</option>;\n                  })}\n                </select>\n              </>\n            );\n          })}\n          <label className=\"sortByContainer\">Sort By</label>\n          <select id=\"sortBy\" name=\"sortBy\" onChange={this.sortHandler}>\n            <option value=\"\"></option>\n            {this.state.sortArray.map((each) => {\n              return <option value={[each[1], each[2]]}>{each[0]}</option>;\n            })}\n          </select>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SideBar;\n","import React, { Component } from \"react\";\nimport ListSelection from \"./ListSelection\";\nimport CardDisplay from \"./CardDisplay\";\nimport Sidebar from \"./Sidebar\";\nimport axios from \"axios\";\nimport \"./styles/styles.scss\";\n\nclass ShowGenerator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: \"\",\n      chosenFilters: [\n        [\"language\"],\n        [\"genres\"],\n        [\"status\"],\n        [\"network\", \"name\"],\n      ],\n      apiData: [],\n      filterArray: [],\n      displayArray: [],\n    };\n  }\n\n  //apiHandler handles the axios calls and returns an array of results by default\n  //it will also be called anytime query is updated from the search bar, and\n  // all results returned dynamically, of course.\n  apiHandler() {\n    this.state.query === \"\"\n      ? axios({\n          url: \"https://api.tvmaze.com/shows\",\n        }).then((response) => {\n          this.setState({\n            apiData: response.data,\n            displayArray: response.data,\n          });\n        })\n      : axios({\n          url: `http://api.tvmaze.com/search/shows?q=${this.state.query}`,\n        }).then((response) => {\n          this.setState({\n            apiData: response.data.map((each) => {\n              return each.show;\n            }),\n            displayArray: response.data.map((each) => {\n              return each.show;\n            }),\n          });\n        });\n  }\n\n  //when page loads, fire the api to get some results immediately\n  componentDidMount() {\n    this.apiHandler();\n  }\n\n  //take the input from the search bar and set the state in ShowGenerator\n  //so the results can be update and will show.\n  setSearch = (queryFromSidebar) => {\n    this.setState(\n      {\n        query: queryFromSidebar,\n      },\n      () => this.apiHandler()\n    );\n  };\n\n  //this filter will loop through a list of returned filters (any drop down value the user has set)\n  //and apply them recursively to the list of shows to be displayed.\n  //this funciton could be cleaned up by likely using the extra word defined/undefined to\n  //set a var so that there are fewer if statements, but we ran out of time. This is something I would like to\n  //go back and refactor.\n  //we hit some nulls/undefined at times in our data, so we need to error handle here in this function.\n  filterData() {\n    let data = this.state.apiData;\n    this.state.filterArray.forEach((filterItem) => {\n      let [word, filter, extra] = filterItem;\n      const recursiveFilter = (recursedArray) => {\n        data = recursedArray.filter((each) => {\n          if (extra !== undefined) {\n            if (\n              each[filter] === null ||\n              each[filter] === undefined ||\n              each[filter][extra] === null ||\n              each[filter][extra] === undefined\n            ) {\n            } else if (each[filter][extra].includes(word)) {\n              return each;\n            }\n          } else if (\n            each[filter] !== null &&\n            each[filter] !== undefined &&\n            each[filter].includes(word)\n          ) {\n            return each;\n          }\n        });\n      };\n      recursiveFilter(data);\n    });\n    this.setState({\n      displayArray: data,\n    });\n  }\n\n  //taking a returned array from sidebar, and filtering it so that any index\n  //that doesn't have the a value in index 0 is not put into the array as it\n  // doesn't have an appropriate value for the filterData function that is called\n  // as it was not set by user.\n  //this will fire anytime a user updates their filters, and automatically filter the\n  //displayed results.\n  setFilterArray = (arrayFromSidebar) => {\n    let setArray = arrayFromSidebar.filter((each) => {\n      if (each[0] !== \"\") return each;\n    });\n    this.setState(\n      {\n        filterArray: setArray,\n      },\n      () => this.filterData()\n    );\n  };\n\n  //this sorts any numerical rating that we decide to add a filter for\n  // the order argument can be set to 1 or -1 to allow for reversing the order\n  // returned.\n  ratingSort = (order) => {\n    let sortArray = this.state.displayArray;\n    sortArray.sort((a, b) => {\n      return (b.rating.average > a.rating.average ? 1 : -1) * order;\n    });\n    this.setState({\n      displayArray: sortArray,\n    });\n  };\n\n  //this sorts any name rating that we decide to add a filter for\n  // the order argument can be set to 1 or -1 to allow for reversing the order\n  // returned.\n  nameSort = (order) => {\n    let sortArray = this.state.displayArray;\n    sortArray.sort(\n      (a, b) => (a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1) * order\n    );\n    this.setState({\n      displayArray: sortArray,\n    });\n  };\n\n  //decide which sort to fire based on the data returned.\n  //this is a brute force type approach, there is probably a nicer way to implement a sort\n  //that doesn't require firing different sort functions, but we couldn't do it in time.\n  sortFunc = (settings) => {\n    settings[0] === \"name\"\n      ? this.nameSort(settings[1])\n      : this.ratingSort(settings[1]);\n  };\n\n  render() {\n    return (\n      <div className=\"showGeneratorContainer\">\n        <div className=\"sideBarContainer\">\n          <Sidebar\n            chosenFilters={this.state.chosenFilters}\n            apiData={this.state.apiData}\n            bringItOnBack={this.setFilterArray}\n            searchPass={this.setSearch}\n            sortPass={this.sortFunc}\n          />\n          <ListSelection />\n        </div>\n        <div className=\"cardDisplayContainer\">\n          <CardDisplay data={this.state.displayArray} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ShowGenerator;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\n// this component adds the show ID to a specific user list\n\nclass AddToList extends Component {\n    constructor() {\n        super();\n        this.state = {\n            dbReturn: []\n        }\n    }\n    componentDidMount = () => {\n        const dbRef = firebase.database().ref()\n        dbRef.on('value', (snapshot) => {\n            const dbArray = []\n            const dbReturn = snapshot.val()\n            for (let objEntry in dbReturn) {\n\n                if (objEntry.length > 14) {\n                    dbArray.push({ key: objEntry, name: dbReturn[objEntry] })\n                }\n            }\n            this.setState({\n                dbReturn: dbArray\n            })\n        })\n    }\n    setNewShow = (event) => {\n        event.preventDefault()\n        const dbRef = firebase.database().ref()\n        const path = event.target.getAttribute('path')\n        const showID = event.target.getAttribute('showid')\n        dbRef.child(path).child(\"shows\").child(`${showID}`).update({ counter: 0 })\n    }\n\n    render() {\n        return (\n            <div className=\"firebase-data\">\n                <h1>User Lists</h1>\n                <ul>\n                    {this.state.dbReturn.map((entry) => {\n                        return (\n                            <button key={entry.key} path={entry.key} showid={(parseInt(this.props.id))}\n                                onClick={this.setNewShow}\n                                className=\"addToListBtn\">\n                                Add to {entry.name.listName}\n                            </button>\n                        )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default AddToList;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport AddToList from \"./AddToList\";\n\nclass TvShowCard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      apiData: [],\n    };\n  }\n  componentDidMount() {\n    axios({\n      url: \"https://api.tvmaze.com/shows/\" + this.props.match.params.id,\n    }).then((response) => {\n      this.setState({\n        apiData: response.data,\n      });\n    });\n  }\n  render() {\n    const data = this.state.apiData;\n    return (\n      <>\n        <div className=\"tvShowCard\">\n          <div className=\"showCardContent\">\n            <h1 className=\"showTitle\">{data.name}</h1>\n            <ul>\n              <li>{data.network && data.network.name}</li>\n              <li>{data.country}</li>\n              <li>{data.genres}</li>\n              <li>\n                {data.summary && data.summary.replace(/(<([^>]+)>)/gi, \"\")}\n              </li>\n            </ul>\n          </div>\n\n          <img\n            src={data.image && data.image.medium}\n            alt={data.name}\n            className=\"tvShowCardImg\"\n          />\n        </div>\n\n        <div className=\"listBtns\">\n          <AddToList id={this.props.match.params.id} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default TvShowCard;\n","import React, { Component } from \"react\";\n\nimport NoImageAvailableLarge from './images/NoImageAvailableLarge.jpg'\nimport firebase from \"./firebase\";\nimport axios from 'axios'\nclass UserList extends Component {\n    constructor() {\n        super();\n        this.state = {\n            displayListInfo: {},\n            displayArray: [],\n            arrayWithShowIDs: [],\n            sortedArray: [],\n        };\n    }\n    \n    componentDidMount() {\n        const dbRef = firebase.database().ref(this.props.match.params.listid)\n        dbRef.on('value', (snapshot) => {\n            const dbReturn = snapshot.val()\n            const idArray = []\n            for (let objEntry in dbReturn.shows) {\n                idArray.push(parseInt(objEntry))\n            }\n            this.setState({\n                displayListInfo: dbReturn,\n            })\n            this.sortArray()\n            this.createUserListDisplay()\n        })\n    }\n\n    sortArray = () => {\n        const unsortedArray = []\n        const unsortedObj = this.state.displayListInfo.shows\n        for (let shows in unsortedObj) {\n            unsortedArray.push({ showID: parseInt(shows), counter: unsortedObj[shows].counter })\n        }\n        const sortedArray = unsortedArray.sort(function (a, b) {\n            return b.counter - a.counter\n        })\n        const sortedArrayWithID = sortedArray.map(x => x.showID)\n        this.setState({\n            arrayWithShowIDs: sortedArrayWithID\n        })\n    }\n\n  counterFunc = (event) => {\n    const dbRef = firebase\n      .database()\n      .ref(this.props.match.params.listid)\n      .child(\"shows\");\n    const showID = event.target.getAttribute(\"showid\");\n    const myNum = parseInt(event.target.value);\n    const origNum = this.state.displayListInfo.shows[showID].counter;\n    dbRef.child(showID).update({ counter: origNum + myNum });\n    this.sortArray();\n  };\n\n  //Loops through the users array of shows to get a set of tv show data.\n  //We only want the shows to display when all are ready, so we store\n  //the returned promises in promiseArray and use PromiseAll to fire\n  //when they are all successful.\n\n  createUserListDisplay = () => {\n    let promiseArray = [];\n    this.state.arrayWithShowIDs.forEach((each) => {\n      promiseArray.push(axios({ url: `https://api.tvmaze.com/shows/${each}` }));\n    });\n    Promise.all(promiseArray).then((item) => {\n      let storeArray = item.map((each) => {\n        return each.data;\n      });\n      this.setState({\n        displayArray: storeArray,\n      });\n    });\n  };\n  render() {\n    return (\n            <div>\n            {\n                this.state.displayArray.map((each) => {\n                    return (\n                        <>\n                          <div className=\"userListContainer\">\n                            <img className=\"userListImage\" src={each.image === null ? NoImageAvailableLarge : each.image.medium} alt={each.name} />\n                            <h4 className='userCardRating'>{each.rating.average}</h4>\n                            <h3 className='userCardTitle'>{each.name}</h3>\n                            <button onClick={this.counterFunc} showid={each.id} value={1} className=\"upVoteBtn\"> UpVote </button>\n                            <button onClick={this.counterFunc} showid={each.id} value={-1} className=\"downVoteBtn\"> DownVote </button>\n\n                          </div>\n                        </>\n                    )\n                })\n            }\n        </div>\n        )\n      \n    }\n}\nexport default UserList\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ShowGenerator from \"./ShowGenerator\";\nimport TvShowCard from \"./TvShowCard\";\nimport firebase from \"./firebase\";\nimport \"./styles/styles.scss\";\nimport UserList from \"./UserList\";\n\nclass App extends Component {\n  getListNameThenAddToDatabase = () => {\n    const listName = prompt(\"Enter List Name\");\n    const dbRef = firebase.database().ref();\n    const userObj = {\n      listName: listName,\n      shows: []\n    }\n    dbRef.push(userObj)\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <header>\n            <h1 className=\"mainTitle\"> PiePepper</h1>\n            <button \n            onClick={this.getListNameThenAddToDatabase}\n            className=\"createListBtn\">\n              Create List\n            </button>\n          </header>\n          <Route exact path=\"/\" component={ShowGenerator} />\n          <Route path=\"/show/:id\" component={TvShowCard} />\n          <Route path=\"/list/:listid\" component={UserList} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}